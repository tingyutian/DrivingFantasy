{"mappings":"ICOI,EACA,EAPJ,MAAM,EAAgB,SAAS,cAAc,CAAC,gBAE9C,CAAA,OAAO,UAAU,CAAG,EACpB,OAAO,WAAW,CAAG,EAErB,IAAI,EAAa,CAAA,EAGb,EAAkB,EAElB,EAAsB,EAqE1B,EAAc,gBAAgB,CAAC,YAlE/B,SAAmB,CAAK,EACpB,EAAa,CAAA,EACb,EAAa,EAAM,OAAO,CAC1B,EAAY,KAAK,GAAG,GACpB,EAAM,cAAc,GAGpB,EAAc,KAAK,CAAC,UAAU,CAAG,MACrC,GA2DA,SAAS,gBAAgB,CAAC,UA/B1B,WACI,EAAa,CAAA,EAEb,EAAc,KAAK,CAAC,UAAU,CAAG,yBACrC,GA4BA,SAAS,gBAAgB,CAAC,YAzD1B,SAAc,CAAK,EACf,GAAI,CAAC,EAAY,OAEjB,IAAM,EAAc,KAAK,GAAG,GACtB,EAAc,EAAc,EAC5B,EAAK,EAAM,OAAO,CAAG,EAC3B,EAAa,EAAM,OAAO,CAC1B,IAAI,EAAc,EAAkB,AAAK,GAAL,EAEhC,EAAiB,EAAc,EAGnC,EAAkB,EAClB,EAAY,EAER,EA9BY,GA8BmB,EA9BnB,GA+BP,EAAkB,KAAc,CAAA,EAAkB,GAAtD,EAEL,OAAO,UAAU,CAAG,KAAK,GAAG,CAAC,AARjB,CAAA,EAAkB,CAAA,EAAc,GAAA,CAAG,EAQZ,OAAO,CAAC,IAC3C,OAAO,WAAW,CAAG,CAGzB,GAsCA,AA5BA,SAAS,IACL,sBAAsB,GAGlB,CAAA,KAAK,GAAG,CAAC,EAAsB,GAAmB,IAAO,CAAA,IACzD,EAAc,KAAK,CAAC,SAAS,CAAG,CAAC,OAAO,EAAE,EAAgB,IAAI,CAAC,CAC/D,EAAsB,GAGtB,CAAC,GAEG,AAAoB,IAApB,GAEI,AAA4B,GAA5B,KAAK,GAAG,CADZ,GAAmB,OAEf,EAAkB,EAClB,OAAO,UAAU,CAAG,EACpB,OAAO,WAAW,CAAG,EAIrC","sources":["<anon>","src/js/steer.js"],"sourcesContent":["// Select the steering wheel element\nconst steeringWheel = document.getElementById(\"steeringWheel\");\nwindow.steerSpeed = 0;\nwindow.steerDegree = 0;\nlet isDragging = false;\nlet startDragX;\nlet startTime;\nlet currentRotation = 0;\nconst maxRotation = 75;\nlet lastAppliedRotation = 0; // Track the last applied rotation to minimize DOM updates\n// Function to start dragging\nfunction startDrag(event) {\n    isDragging = true;\n    startDragX = event.clientX;\n    startTime = Date.now();\n    event.preventDefault();\n    // Cancel any ongoing CSS transition to allow instant response\n    steeringWheel.style.transition = \"none\";\n}\n// Function to handle mouse movement\nfunction drag(event) {\n    if (!isDragging) return;\n    const currentTime = Date.now();\n    const timeElapsed = currentTime - startTime;\n    const dx = event.clientX - startDragX;\n    startDragX = event.clientX;\n    let newRotation = currentRotation + dx * 0.5;\n    let rotationChange = newRotation - currentRotation;\n    let speed = rotationChange / (timeElapsed / 1000);\n    currentRotation = newRotation;\n    startTime = currentTime;\n    if (currentRotation > maxRotation) currentRotation = maxRotation;\n    else if (currentRotation < -maxRotation) currentRotation = -maxRotation;\n    window.steerSpeed = Math.abs(speed.toFixed(2));\n    window.steerDegree = currentRotation;\n//console.log(`Speed:${window.steerSpeed}`);\n}\n// Function to end dragging\nfunction stopDrag() {\n    isDragging = false;\n    // Apply a CSS transition to smooth the return-to-center\n    steeringWheel.style.transition = \"transform 0.5s ease-out\";\n}\n// Update function to animate the steering wheel returning to center\nfunction update() {\n    requestAnimationFrame(update);\n    // Apply the rotation to the steering wheel element only if significant change occurs\n    if (Math.abs(lastAppliedRotation - currentRotation) > 0.1 || isDragging) {\n        steeringWheel.style.transform = `rotate(${currentRotation}deg)`;\n        lastAppliedRotation = currentRotation;\n    }\n    if (!isDragging) // Smoothly transition back to center when not dragging\n    {\n        if (currentRotation !== 0) {\n            currentRotation *= 0.95;\n            if (Math.abs(currentRotation) < 0.1) {\n                currentRotation = 0;\n                window.steerSpeed = 0;\n                window.steerDegree = 0;\n            }\n        }\n    }\n}\n// Add event listeners\nsteeringWheel.addEventListener(\"mousedown\", startDrag);\ndocument.addEventListener(\"mouseup\", stopDrag);\ndocument.addEventListener(\"mousemove\", drag);\n// Start the update loop\nupdate();\n\n//# sourceMappingURL=index.9b3616ad.js.map\n","// Select the steering wheel element\nconst steeringWheel = document.getElementById('steeringWheel');\n\nwindow.steerSpeed = 0;\nwindow.steerDegree = 0;\n\nlet isDragging = false;\nlet startDragX;\nlet startTime;\nlet currentRotation = 0;\nconst maxRotation = 75;\nlet lastAppliedRotation = 0; // Track the last applied rotation to minimize DOM updates\n\n// Function to start dragging\nfunction startDrag(event) {\n    isDragging = true;\n    startDragX = event.clientX;\n    startTime = Date.now();\n    event.preventDefault();\n    \n    // Cancel any ongoing CSS transition to allow instant response\n    steeringWheel.style.transition = 'none';\n}\n\n// Function to handle mouse movement\nfunction drag(event) {\n    if (!isDragging) return;\n\n    const currentTime = Date.now();\n    const timeElapsed = currentTime - startTime;\n    const dx = event.clientX - startDragX;\n    startDragX = event.clientX;\n    let newRotation = currentRotation + dx * 0.5;\n\n    let rotationChange = newRotation - currentRotation;\n    let speed = rotationChange / (timeElapsed / 1000);\n\n    currentRotation = newRotation;\n    startTime = currentTime;\n\n    if (currentRotation > maxRotation) currentRotation = maxRotation;\n    else if (currentRotation < -maxRotation) currentRotation = -maxRotation;\n\n    window.steerSpeed = Math.abs(speed.toFixed(2));\n    window.steerDegree = currentRotation;\n\n    //console.log(`Speed:${window.steerSpeed}`);\n}\n\n// Function to end dragging\nfunction stopDrag() {\n    isDragging = false;\n    // Apply a CSS transition to smooth the return-to-center\n    steeringWheel.style.transition = 'transform 0.5s ease-out';\n}\n\n// Update function to animate the steering wheel returning to center\nfunction update() {\n    requestAnimationFrame(update);\n\n    // Apply the rotation to the steering wheel element only if significant change occurs\n    if (Math.abs(lastAppliedRotation - currentRotation) > 0.1 || isDragging) {\n        steeringWheel.style.transform = `rotate(${currentRotation}deg)`;\n        lastAppliedRotation = currentRotation;\n    }\n    \n    if (!isDragging) {\n        // Smoothly transition back to center when not dragging\n        if (currentRotation !== 0) {\n            currentRotation *= 0.95;\n            if (Math.abs(currentRotation) < 0.1) {\n                currentRotation = 0;\n                window.steerSpeed = 0;\n                window.steerDegree = 0;\n            }\n        }\n    }\n}\n\n// Add event listeners\nsteeringWheel.addEventListener('mousedown', startDrag);\ndocument.addEventListener('mouseup', stopDrag);\ndocument.addEventListener('mousemove', drag);\n\n// Start the update loop\nupdate();\n"],"names":["startDragX","startTime","steeringWheel","document","getElementById","window","steerSpeed","steerDegree","isDragging","currentRotation","lastAppliedRotation","addEventListener","event","clientX","Date","now","preventDefault","style","transition","currentTime","timeElapsed","dx","newRotation","rotationChange","Math","abs","speed","toFixed","update","requestAnimationFrame","transform"],"version":3,"file":"index.9b3616ad.js.map"}